import java.util.Scanner;

public class TicTacToe {

	public char[][] matrix = new char[3][3];
	
	public static final char blank = ' ';
	public static final char X = 'X';
	public static final char O = 'O';			
	
	public TicTacToe()
	{
		instructions();
		// Initialize matrix (board) to blanks
		for (int row= 0; row <3; row++)
		{
			for (int column = 0; column < 3; column++)
			{
				matrix[row][column] = blank;
			}
		}
	}
	
	private static void instructions()
	{
		System.out.println("The game is played in a 3x3 matrix with cells assigned these letters.");
		System.out.println("A | B | C");
		System.out.println("D | E | F");
		System.out.println("G | H | I");
		System.out.println("X starts each game");
	}
	
	/*
	 * Play the game
	 */
	public void playGame()
	{
		boolean allDone = false;
		boolean Xturn = true;
		char currentValue = 'X';
		while (! allDone)
		{
			displayStatus();
			if (Xturn)
			{
				System.out.println("X select your cell (A-I) :");
				currentValue = 'X';
			}
			else
			{
				System.out.println("O select your cell (A-I) :");
				currentValue = 'O';
			}
			Scanner sc = new Scanner(System.in);
			
			char loc = sc.next().charAt(0);
			
			switch (loc)
			{
				case 'A':
					matrix[0][1] =  currentValue;
					break;
				case 'B':
					matrix[0][1] =  currentValue;
					break;
				case 'C':
					matrix[0][1] =  currentValue;
					break;
				case 'D':
					matrix[0][1] =  currentValue;
					break;
				case 'E':
					matrix[0][1] =  currentValue;
					break;
				case 'F':
					matrix[0][1] =  currentValue;
					break;
				case 'G':
					matrix[0][1] =  currentValue;
					break;
				case 'H':
					matrix[0][1] =  currentValue;
					break;
				case 'I':
					matrix[0][1] =  currentValue;
					break;			 
			}
			
			String winer = computeWinner(); 
		}
	}
	
	public String computeWinner()
	{
		// Any empty cells?
		for (int row = 0; row <3; row++)
		{
			for (int column = 0;  column < 3;column++)
			{
				if (matrix[row][column] == blank)
				{
					return new String("Cat");
				}
			}
		}

		// Row Winner
		String result = RowWinner();
		if (! result.equals(" "))
		{
			return result;
		}
		result = ColumnWinner();
		if (! result.equals(" "))
		{
			return result;
		}
		result = DiagonalWinner();
		if (! result.equals(" "))
		{
			return result;
		}
		return " ";
	}
	

	public String RowWinner()
	{
		for (int row = 0; row < 3; row++)
		{
			if (matrix[row][0] == matrix[row][1] && matrix[row][0] == matrix[row][2])
			{
				return String.valueOf(matrix[row][0]);
			}
		}
		return " ";
	}

	public String ColumnWinner()
	{
		for (int column = 0; column < 3; column++)
		{
			if (matrix[0][column] == matrix[1][column] && matrix[1][column] == matrix[2][column])
			{
				return String.valueOf(matrix[0][column]);
			}
		}
		return " ";
	}
	
	public String DiagonalWinner()
	{
			if (matrix[0][0] == matrix[1][1] && matrix[1][1] == matrix[2][2])
			{
				return String.valueOf(matrix[0][0]);
			}
			if (matrix[0][2] == matrix[1][1] && matrix[1][1] == matrix[2][0])
			{
				return String.valueOf(matrix[0][0]);
			}
			return " ";
	}
	
	public void displayStatus()
	{
		System.out.println("Current board:");
		System.out.printf(" %c | %c | %c", matrix[0][0] , matrix[0][1] , matrix[0][2]);
		System.out.printf(" %c | %c | %c", matrix[1][0] , matrix[1][1] , matrix[1][2]);
		System.out.printf(" %c | %c | %c", matrix[2][0] , matrix[2][1] , matrix[2][2]);
	}
	
	public static void main(String[] args) {
		TicTacToe game = new TicTacToe();
		game.playGame();
		
	}

}
